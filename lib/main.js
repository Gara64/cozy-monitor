// Generated by CoffeeScript 1.3.3
(function() {
  var Client, async, client, controllerClient, couchUrl, exec, haibu, haibuUrl, homeClient, homeUrl, manifest, program, proxyUrl;

  require("colors");

  program = require('commander');

  async = require("async");

  exec = require('child_process').exec;

  haibu = require('haibu-api');

  Client = require("request-json").JsonClient;

  homeUrl = "http://localhost:9103/";

  proxyUrl = "http://localhost:9104/";

  couchUrl = "http://localhost:5984/";

  haibuUrl = "http://localhost:9002/";

  homeClient = new Client(homeUrl);

  controllerClient = new Client(haibuUrl);

  client = haibu.createClient({
    host: 'localhost',
    port: 9002
  });

  client = client.drone;

  client.brunch = function(manifest, callback) {
    var data;
    data = {
      brunch: manifest
    };
    return controllerClient.post("drones/" + manifest.name + "/brunch", data, callback);
  };

  manifest = {
    "domain": "localhost",
    "repository": {
      "type": "git"
    },
    "scripts": {
      "start": "server.coffee"
    }
  };

  program.version('0.0.1').usage('<action> <app>');

  program.command("install <app>").description("Install application in haibu").action(function(app) {
    manifest.name = app;
    manifest.repository.url = "https://github.com/mycozycloud/cozy-" + app + ".git";
    manifest.user = app;
    console.log("Install started for " + app + "...");
    return client.clean(manifest, function(err, result) {
      return client.start(manifest, function(err, result) {
        if (err) {
          console.log(err);
          return console.log("Install failed");
        } else {
          return client.brunch(manifest, function() {
            return console.log("" + app + " sucessfully installed");
          });
        }
      });
    });
  });

  program.command("install_home <app>").description("Install application via home app").action(function(app) {
    var path;
    manifest.name = app;
    manifest.git = "https://github.com/mycozycloud/cozy-" + app + ".git";
    manifest.user = app;
    console.log("Install started for " + app + "...");
    path = "api/applications/install";
    return homeClient.post(path, manifest, function(err, res, body) {
      if (err || res.statusCode !== 200) {
        if (err != null) {
          console.log(err);
        }
        console.log("Install failed");
        if (body != null) {
          if (body.msg != null) {
            return console.log(body.msg);
          } else {
            return console.log(body);
          }
        }
      } else {
        return console.log("" + app + " sucessfully installed");
      }
    });
  });

  program.command("uninstall_home <app>").description("Install application via home app").action(function(app) {
    var path;
    console.log("Uninstall started for " + app + "...");
    path = "api/applications/" + app + "/uninstall";
    return homeClient.del(path, function(err, res, body) {
      if (err || res.statusCode !== 200) {
        if (err != null) {
          console.log(err);
        }
        console.log("Uninstall failed");
        if (body != null) {
          if (body.msg != null) {
            return console.log(body.msg);
          } else {
            return console.log(body);
          }
        }
      } else {
        return console.log("" + app + " sucessfully uninstalled");
      }
    });
  });

  program.command("uninstall <app>").description("Remove application from haibu").action(function(app) {
    manifest.name = app;
    manifest.user = app;
    console.log("Uninstall started for " + app + "...");
    return client.clean(manifest, function(err, result) {
      if (err) {
        console.log("Uninstall failed");
        return console.log(err);
      } else {
        return console.log("" + app + " sucessfully uninstalled");
      }
    });
  });

  program.command("start <app>").description("Start application through haibu").action(function(app) {
    manifest.name = app;
    manifest.repository.url = "https://github.com/mycozycloud/cozy-" + app + ".git";
    manifest.user = app;
    console.log("Starting " + app + "...");
    return client.start(manifest, function(err, result) {
      if (err) {
        console.log("Start failed");
        return console.log(err);
      } else {
        return console.log("" + app + " sucessfully started");
      }
    });
  });

  program.command("stop <app>").description("Stop application through haibu").action(function(app) {
    console.log("Stopping " + app + "...");
    app.user = app;
    return client.stop(app, function(err) {
      if (err) {
        console.log("Stop failed");
        return console.log(err.result.error.message);
      } else {
        return console.log("" + app + " sucessfully stopped");
      }
    });
  });

  program.command("brunch <app>").description("Build brunch client for given application.").action(function(app) {
    console.log("Brunch build " + app + "...");
    manifest.name = app;
    manifest.repository.url = "https ://github.com/mycozycloud/cozy-" + app + ".git";
    manifest.user = app;
    return client.brunch(manifest, function(err, res, body) {
      if (res.statusCode !== 200) {
        console.log("Brunch build failed.");
        return console.log(body);
      } else {
        return console.log("" + app + " client sucessfully built.");
      }
    });
  });

  program.command("restart <app>").description("Restart application trough haibu").action(function(app) {
    console.log("Stopping " + app + "...");
    return client.stop(app, function(err) {
      if (err) {
        console.log("Stop failed");
        return console.log(err.result.error.message);
      } else {
        console.log("" + app + " sucessfully stopped");
        manifest.name = app;
        manifest.repository.url = "https://github.com/mycozycloud/cozy-" + app + ".git";
        manifest.user = app;
        console.log("Starting " + app + "...");
        client.start(manifest, function(err, result) {});
        if (err) {
          console.log("Start failed");
          return console.log(err);
        } else {
          return console.log("" + app + " sucessfully started");
        }
      }
    });
  });

  program.command("update <app>").description("Update application (git + npm install) and restart it through haibu").action(function(app) {
    var path;
    console.log("Update " + app + "...");
    manifest.name = app;
    manifest.user = app;
    path = "./node_modules/haibu/local/cozy/" + app + "/cozy-" + app + "/";
    return exec("cd " + path + "; git pull origin master; npm install --production", function(error, stdout, stderr) {
      console.log(stdout);
      if (error) {
        console.log(error);
      }
      return client.stop(app, function(err) {
        return client.start(manifest, function(err) {
          if (err) {
            console.log("Update failed");
            return console.log(err.result.error.message);
          } else {
            return client.brunch(manifest, function() {
              return console.log("" + app + " sucessfully updated");
            });
          }
        });
      });
    });
  });

  program.command("light-update <app>").description("Update application (git + npm install) and restart it through haibu").action(function(app) {
    console.log("Light update " + app + "...");
    manifest.name = app;
    manifest.repository.url = "https ://github.com/mycozycloud/cozy-" + app + ".git";
    manifest.user = app;
    return controllerClient.post("drones/" + app + "/light-update", {
      update: manifest
    }, function(err, res, body) {
      if (res.statusCode !== 200) {
        console.log("Update failed");
        return console.log(body);
      } else {
        return client.brunch(manifest, function() {
          return console.log("" + app + " sucessfully updated");
        });
      }
    });
  });

  program.command("uninstall-all").description("Uninstall all apps from haibu").action(function(app) {
    console.log("Uninstall all apps...");
    return client.cleanAll(function(err) {
      if (err) {
        console.log("Uninstall all failed");
        return console.log(err.result.error.message);
      } else {
        return console.log("All apps sucessfully uinstalled");
      }
    });
  });

  program.command("script <app> <script>").description("(Broken) Launch script that comes with given application").action(function(app, script) {
    var child, path;
    console.log("Run script " + script + " for " + app + "...");
    path = "./node_modules/haibu/local/cozy/" + app + "/cozy-" + app + "/";
    return child = exec("cd " + path + "; coffee " + script + ".coffee", function(error, stdout, stderr) {
      console.log(stdout);
      if (error !== null) {
        console.log("exec error: " + error);
        return console.log("stderr: " + stderr);
      }
    });
  });

  program.command("script_arg <app> <script> <argument>").description("(Broken) Launch script that comes with given application").action(function(app, script, argument) {
    var child, path;
    console.log("Run script " + script + " for " + app + "...");
    path = "./node_modules/haibu/local/cozy/" + app + "/cozy-" + app + "/";
    return child = exec("cd " + path + "; coffee " + script + ".coffee " + argument, function(error, stdout, stderr) {
      console.log(stdout);
      if (error !== null) {
        console.log("exec error: " + error);
        return console.log("stderr: " + stderr);
      }
    });
  });

  program.command("reset-proxy").description("Reset proxy routes list of applications given by home.").action(function() {
    console.log("Reset proxy routes");
    statusClient.host = proxyUrl;
    return statusClient.get("routes/reset", function(err) {
      if (err) {
        console.log(err);
        return console.log("Reset proxy failed.");
      } else {
        return console.log("Reset proxy succeeded.");
      }
    });
  });

  program.command("routes").description("Display routes currently configured inside proxy.").action(function() {
    console.log("Display proxy routes...");
    statusClient.host = proxyUrl;
    return statusClient.get("routes", function(err, res, routes) {
      var route, _results;
      if (!err && (routes != null)) {
        _results = [];
        for (route in routes) {
          _results.push(console.log("" + route + " => " + routes[route]));
        }
        return _results;
      }
    });
  });

  program.command("status").description("Give current state of cozy platform applications").action(function() {
    var checkApp;
    checkApp = function(app, host, path) {
      if (path == null) {
        path = "";
      }
      return function(callback) {
        statusClient.host = host;
        return statusClient.get(path, function(err, res) {
          if (err) {
            console.log(("" + app + ": ") + "down".red);
          } else {
            console.log(("" + app + ": ") + "up".green);
          }
          return callback();
        });
      };
    };
    return async.series([checkApp("haibu", "http://localhost:9002/", "version"), checkApp("data-system", "http://localhost:9101/"), checkApp("indexer", "http://localhost:9102/"), checkApp("home", "http://localhost:9103/"), checkApp("proxy", "http://localhost:9104/", "routes")], function() {
      statusClient.host = homeUrl;
      return statusClient.get("api/applications/", function(err, res, apps) {
        var app, func, funcs, _i, _len, _ref;
        funcs = [];
        if ((apps != null) && (apps.rows != null)) {
          _ref = apps.rows;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            app = _ref[_i];
            func = checkApp(app.name, "http://localhost:" + app.port + "/");
            funcs.push(func);
          }
          return async.series(funcs, function() {});
        }
      });
    });
  });

  program.command("reinstall-all").description("Reinstall all user applications").action(function() {
    var installApp;
    installApp = function(app) {
      return function(callback) {
        console.log("Install started for " + app.name + "...");
        manifest.name = app.name;
        manifest.repository.url = app.git;
        manifest.user = app.user;
        return client.clean(manifest, function(err, result) {
          return client.start(manifest, function(err, result) {
            if (err) {
              console.log(err);
              console.log("Install failed");
            } else {
              client.brunch(manifest, function() {
                return console.log("" + app.name + " sucessfully installed");
              });
            }
            return callback();
          });
        });
      };
    };
    statusClient.host = homeUrl;
    return statusClient.get("api/applications/", function(err, res, apps) {
      var app, func, funcs, _i, _len, _ref;
      funcs = [];
      if ((apps != null) && (apps.rows != null)) {
        _ref = apps.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          func = installApp(app);
          funcs.push(func);
        }
        return async.series(funcs, function() {
          console.log("All apps reinstalled.");
          console.log("Reset proxy routes");
          statusClient.host = proxyUrl;
          return statusClient.get("routes/reset", function(err) {
            if (err) {
              console.log(err);
              return console.log("Reset proxy failed.");
            } else {
              return console.log("Reset proxy succeeded.");
            }
          });
        });
      }
    });
  });

  program.command("backup <target>").description("Start couchdb replication to the target").action(function(target) {
    var data;
    client = new Client(couchUrl);
    data = {
      source: "cozy",
      target: target
    };
    return client.post("_replicate", data, function(err, res, body) {
      if (err) {
        console.log(err);
        console.log("Backup Not Started");
        return process.exit(1);
      } else if (!body.ok) {
        console.log(body);
        console.log("Backup start but failed");
        return process.exit(1);
      } else {
        console.log("Backup succeed");
        return process.exit(0);
      }
    });
  });

  program.command("*").description("Display error message for an unknown command.").action(function() {
    return console.log('Unknown command, run "coffee monitor --help"' + ' to know the list of available commands.');
  });

  program.parse(process.argv);

}).call(this);
